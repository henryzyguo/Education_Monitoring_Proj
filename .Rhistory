enr_age <- read.csv('enr_by_agegrd.csv')
staff_ed <- read.csv('staff_by_ed.csv')
ent_new <- read.csv('new_entrants.csv')
schage_pop <- read.csv('schage_population.csv')
staff_qf <- read.csv('staff_by_qlf.csv')
stu_grd9 <- read.csv('Grd_0910Students.csv')
acad_grd9 <- read.csv('Grd_0910Academics.csv')
acad_12 <- read.csv("Grd1112_Academics.csv")
enr_age<-filter(enr_age,SCHOOL=="Addibre")
G1M<-select(enr_age,starts_with("G1M"),Acad_yr)
G1F<-select(enr_age,starts_with("G1F"),Acad_yr)
G1M<-as.table(arrange(G1M,Acad_yr))
arrange(G1M,Acad_yr)
G1M<-arrange(G1M,Acad_yr)
G1M$Acad_yr <-NULL
G1M
rownames<-(2004:2010)
rownames(G1M)<-(2004:2010)
G1M
G1M$row <- seq_len(nrow(G1M))
dat2 <- melt(G1M, id.vars = "row")
dat2
ggplot(dat2, aes(x=varible, y=value, fill=row))+geom_bar(stat="identity")
ggplot(dat2, aes(x=variable, y=value, fill=row))+geom_bar(stat="identity")
ggplot(dat2, aes(x=value, y=varialbe, fill=row))+geom_bar(stat="identity")
ggplot(dat2, aes(x=value, y=variable, fill=row))+geom_bar(stat="identity")
enr_age <- read.csv('enr_by_agegrd.csv')
staff_ed <- read.csv('staff_by_ed.csv')
ent_new <- read.csv('new_entrants.csv')
schage_pop <- read.csv('schage_population.csv')
staff_qf <- read.csv('staff_by_qlf.csv')
stu_grd9 <- read.csv('Grd_0910Students.csv')
acad_grd9 <- read.csv('Grd_0910Academics.csv')
acad_12 <- read.csv("Grd1112_Academics.csv")
enr_age<-filter(enr_age,SCHOOL=="Addibre")
G1M<-select(enr_age,starts_with("G1M"),Acad_yr)
G1F<-select(enr_age,starts_with("G1F"),Acad_yr)
G1M<-arrange(G1M,Acad_yr)
G1M$Acad_yr <-NULL
G1M$row <- seq_len(nrow(G1M)
rownames(G1M)<-(2004:2010)
rownames(G1M)<-(2004:2010)
G1M
G1M$row <- seq_len(nrow(G1M))
G1M
enr_age <- read.csv('enr_by_agegrd.csv')
enr_age<-filter(enr_age,SCHOOL=="Addibre")
G1M<-select(enr_age,starts_with("G1M"),Acad_yr)
G1F<-select(enr_age,starts_with("G1F"),Acad_yr)
G1M<-arrange(G1M,Acad_yr)
G1M$Acad_yr <-NULL
rownames(G1M)<-(2004:2010)
t(G1M)
G1M$row <- seq_len(nrow(G1M))
dat2 <- melt(G1M, id.vars = "row")
ggplot(dat2, aes(x=varialbe, y=value, fill=row))+geom_bar(stat="identity")
ggplot(dat2, aes(x=variabLe, y=value, fill=row))+geom_bar(stat="identity")
ggplot(dat2, aes(x=variable, y=value, fill=row))+geom_bar(stat="identity")
enr_age <- read.csv('enr_by_agegrd.csv')
enr_age<-filter(enr_age,SCHOOL=="Addibre")
G1M<-select(enr_age,starts_with("G1M"),Acad_yr)
G1F<-select(enr_age,starts_with("G1F"),Acad_yr)
G1M<-arrange(G1M,Acad_yr)
G1M$Acad_yr <-NULL
rownames(G1M)<-(2004:2010)
G1M<-t(G1M)
G1M
G1M$row <- seq_len(nrow(G1M))
dat2 <- melt(G1M, id.vars = "row")
ggplot(dat2, aes(x=variable, y=value, fill=row))+geom_bar(stat="identity")
G1M<-as.numeric(t(G1M))
G1M<-sapply(t(G1M),as.numeric)
G1M
G1M<-sapply(t(G1M),as.numeric)
G`1M
G1M
FDS
)
()
acad_overview <- read.csv('aca_overview.csv')
View(acad_overview)
acad_overview <- filter(acad_overview,test="1ST")
acad_overview <- filter(acad_overview,test=="1ST")
head(acad_overview)
acad_overview <- filter(acad_overview,test==c("1ST"))
acad_overview <- select(acad_overview,test==c("1ST"))
acad_overview <- filter(acad_overview,test=="1ST")
acad_overview <- read.csv('aca_overview.csv')
acad_overview <- filter(acad_overview,test=="1ST")
acad_overview <- filter(acad_overview,'test'=="1ST")
ent_new <-filter(ent_new,SCHOOL=="Addibre")
ent_new <- read.csv('new_entrants.csv')
ent_new <-filter(ent_new,SCHOOL=="Addibre")
library(dplyr)
library(tidyr)
library(ggplot2)
library(reshape2)
acad_overview <- read.csv('aca_overview.csv')
acad_overview <- filter(acad_overview,test=="1ST")
acad_overview
acad_overview <- select(acad_overview,-test)
ggplot(acad_overview, aes(x=grade, y=~.,fill=as.factor(sex))) + geom_bar(stat="identity") ```
ggplot(acad_overview, aes(x=grade,fill=as.factor(sex))) + geom_bar(stat="identity") ```
acad_overview <- t(select(acad_overview,-test))
acad_overview <- read.csv('aca_overview.csv')
acad_overview <- filter(acad_overview,test=="1ST")
acad_overview <- t(select(acad_overview,-test))
acad_overview
ggplot(acad_overview, aes(x=grade)) + geom_bar(stat="identity") ```
ggplot(acad_overview, aes(x=grade)) + geom_bar(stat="identity")
acad_overview <- read.csv('aca_overview.csv')
acad_overview <- filter(acad_overview,test=="1ST")
acad_overview <- select(acad_overview,-test)
rownames(acad_overview)<-acad_overview$grade
acad_overview<-t(acad_overview)
acad_overview <- read.csv('aca_overview.csv')
acad_overview <- filter(acad_overview,test=="1ST")
acad_overview <- select(acad_overview,-test)
rownames(acad_overview)<-acad_overview$grade
acad_overview<-t(acad_overview)
acad_overview <- read.csv('aca_overview.csv')
acad_overview <- filter(acad_overview,test=="1ST")
acad_overview <- select(acad_overview,-test)
acad_overview
ggplot(acad_overview, aes(x=grade)) + geom_bar(stat="identity")
acad_overview <- melt(acad_overview)
ggplot(acad_overview, aes(x=grade,y=value)) + geom_bar(stat="identity")+facet_grid(.~variable)
ggplot(acad_overview, aes(x=variable,y=value)) + geom_bar(stat="identity")+facet_grid(.~grade)
ggplot(acad_overview, aes(x=grade,y=value)) + geom_bar(stat="identity")+facet_grid(.~variable)
ggplot(acad_overview, aes(x=variable,y=value)) + geom_bar(stat="identity")+facet_grid(.~grade)
acad_overview$grade <- as.numeric(as.character(acad_overview$grade))
acad_overview$grade <- as.character(acad_overview$grade)
acad_overview <- read.csv('aca_overview.csv')
acad_overview <- filter(acad_overview,test=="1ST")
acad_overview <- select(acad_overview,-test)
acad_overview <- melt(acad_overview)
#rownames(acad_overview)<-acad_overview$grade
#acad_overview<-t(acad_overview)
acad_overview$grade <- as.character(acad_overview$grade)
acad_overview$grade <- as.character(acad_overview$grade)
ggplot(acad_overview, aes(x=variable,y=value)) + geom_bar(stat="identity")+facet_grid(.~grade)
acad_overview<-arrange(acad_overview,grade)
ggplot(acad_overview, aes(x=variable,y=value)) + geom_bar(stat="identity")+facet_grid(.~grade)
ggplot(acad_overview, aes(x=variable,y=value,fill=variable)) + geom_bar(stat="identity")+facet_grid(.~grade)
ggplot(acad_overview, aes(x=variable,y=value,fill=variable)) + geom_bar(stat="identity")+
scale_fill_manual(values=c("indianred", "orange", "gold","skyblue4","light blue","blue"))+facet_grid(.~grade)
acad_overview <- read.csv('aca_overview.csv')
acad_overview <- filter(acad_overview,test=="1ST")
acad_overview <- select(acad_overview,-test)
acad_overview <- melt(acad_overview)
acad_overview <- read.csv('aca_overview.csv')
acad_overview <- filter(acad_overview,test=="1ST")
acad_overview <- select(acad_overview,-test)
rownames(acad_overview) <-c(9:12)
acad_overview <- melt(acad_overview)
#rownames(acad_overview)<-acad_overview$grade
acad_overview <- read.csv('aca_overview.csv')
acad_overview <- filter(acad_overview,test=="1ST")
acad_overview <- select(acad_overview,-test)
rownames(acad_overview) <-c(9:12)
acad_overview <- melt(acad_overview)
acad_overview <- read.csv('aca_overview.csv')
acad_overview <- filter(acad_overview,test=="1ST")
acad_overview <- select(acad_overview,-test)
#rownames(acad_overview) <-c(9:12)
acad_overview <- melt(acad_overview)
ggplot(acad_overview, aes(x=variable,y=value,fill=variable)) + geom_bar(stat="identity")+
scale_fill_manual(values=c("indianred", "orange", "gold","skyblue4","light blue","blue"))+facet_grid(.~grade)
ggplot(acad_overview, aes(x=variable,y=value,fill=variable)) + geom_bar(stat="identity")+
scale_fill_manual(values=c("indianred", "orange", "gold","skyblue4","light blue","blue"))+facet_grid(.~reorder(grade))
ggplot(acad_overview, aes(x=variable,y=value,fill=variable)) + geom_bar(stat="identity")+
scale_fill_manual(values=c("indianred", "orange", "gold","skyblue4","light blue","blue"))+facet_grid(.~reorder(grade,-value))
ggplot(acad_overview, aes(x=variable,y=value,fill=variable)) + geom_bar(stat="identity")+
scale_fill_manual(values=c("indianred", "orange", "gold","skyblue4","light blue","blue"))+facet_grid(.~reorder(grade))
ggplot(acad_overview, aes(x=variable,y=value,fill=variable)) + geom_bar(stat="identity")+
scale_fill_manual(values=c("indianred", "orange", "gold","skyblue4","light blue","blue"))+facet_grid(.~reorder(grade,value))
```
ggplot(acad_overview, aes(x=variable,y=value,fill=variable)) + geom_bar(stat="identity")+
scale_fill_manual(values=c("indianred", "orange", "gold","skyblue4","light blue","blue"))+labs(x="grade",y="score",title="academic overview each year",fill="subject")+facet_grid(.~reorder(grade,value))
ggplot(acad_overview, aes(x=variable,y=value,fill=variable)) + geom_bar(stat="identity")+
scale_fill_manual(values=c("indianred", "orange", "gold","skyblue4","light blue","blue"))+labs(x="grade",y="score",title="Academic overview each year",fill="subject")+theme(plot.title = element_text(hjust = 0.5))+facet_grid(.~reorder(grade,value))
```
map_data <- world_happiness %>%
filter(year==2015)%>%
select(-year,-Region)
world_happiness1 <- read.csv("/Users/danlupan/2015-4.csv")
#clean data frame
world_happiness<-select(world_happiness1,
year,
Country,
Region,
Happiness=Happiness.Score,
Rank=Happiness.Rank,
Economy=Economy..GDP.per.Capita.,
Family,
Health=Health..Life.Expectancy.,
Freedom,
Trust=Trust..Government.Corruption.,
Generosity,
Dystopia.Residual)
map_data <- world_happiness %>%
filter(year==2015)%>%
select(-year,-Region)
map_world <- map_data(map="world")
map_world$Country <- map_world$region
map_world_after <- merge(map_world, map_data, by="Country", all.x=TRUE)
# reorder world map data
map_world_after <- map_world_after[order(map_world_after$group, map_world_after$order), ]
Happiness.plot <- ggplot() + geom_map(data=map_world_after, aes(map_id=region, x=long,  y=lat,fill=Happiness),map=map_world_after)
# add color, adjust coordinate and add ttile & theme
Happiness.plot <- Happiness.plot + scale_fill_gradient(low = "white", high = "blue", guide = "colourbar")+coord_equal()+labs(x="Latitude",y="Longitude")+ggtitle(label = "World Happiness Map 2016")+theme(plot.title = element_text(face="bold",hjust = 0.5))
Happiness.plot
map_world
View(map_world)
View(map_world_after)
#  clean data, choose data in 2016, delete useless columns
map_data <- world_happiness %>%
filter(year==2017)%>%
select(-year,-Region)
# use map_data to convert data into maps
map_world <- map_data(map="world")
# since values in Country and Region not match, try to merge them
map_world$Country <- map_world$region
map_world_after <- merge(map_world, map_data, by="Country", all.x=TRUE)
# reorder world map data
map_world_after <- map_world_after[order(map_world_after$group, map_world_after$order), ]
# create world map of happiness
Happiness.plot <- ggplot() + geom_map(data=map_world_after, aes(map_id=region, x=long,  y=lat,fill=Happiness),map=map_world_after)
# add color, adjust coordinate and add ttile & theme
Happiness.plot <- Happiness.plot + scale_fill_gradient(low = "white", high = "blue", guide = "colourbar")+coord_equal()+labs(x="Latitude",y="Longitude")+ggtitle(label = "World Happiness Map 2016")+theme(plot.title = element_text(face="bold",hjust = 0.5))
Happiness.plot
world_happiness1 <- read.csv("/Users/danlupan/2015-4.csv")
#  clean data, choose data in 2016, delete useless columns
map_data <- world_happiness %>%
filter(year==2017)%>%
select(-year,-Region)
# use map_data to convert data into maps
map_world <- map_data(map="world")
# since values in Country and Region not match, try to merge them
map_world$Country <- map_world$region
map_world_after <- merge(map_world, map_data, by="Country", all.x=TRUE)
# reorder world map data
map_world_after <- map_world_after[order(map_world_after$group, map_world_after$order), ]
# create world map of happiness
Happiness.plot <- ggplot() + geom_map(data=map_world_after, aes(map_id=region, x=long,  y=lat,fill=Happiness),map=map_world_after)
# add color, adjust coordinate and add ttile & theme
Happiness.plot <- Happiness.plot + scale_fill_gradient(low = "white", high = "blue", guide = "colourbar")+coord_equal()+labs(x="Latitude",y="Longitude")+ggtitle(label = "World Happiness Map 2016")+theme(plot.title = element_text(face="bold",hjust = 0.5))
Happiness.plot
#clean data frame
world_happiness<-select(world_happiness1,
year,
Country,
Region,
Happiness=Happiness.Score,
Rank=Happiness.Rank,
Economy=Economy..GDP.per.Capita.,
Family,
Health=Health..Life.Expectancy.,
Freedom,
Trust=Trust..Government.Corruption.,
Generosity,
Dystopia.Residual)
View(world_happiness)
#  clean data, choose data in 2016, delete useless columns
map_data <- world_happiness %>%
filter(year==2017)%>%
select(-year,-Region)
#  clean data, choose data in 2016, delete useless columns
map_data <- world_happiness %>%
filter(year==2017)%>%
select(-year,-Region)
#  clean data, choose data in 2016, delete useless columns
map_data <- world_happiness %>%
filter(year==2017)%>%
select(-year,-Region)
#  clean data, choose data in 2016, delete useless columns
map_data <- world_happiness %>%
filter(year==2017)%>%
select(-year,-Region)
#  clean data, choose data in 2016, delete useless columns
map_data <- world_happiness %>%
filter(year==2017)%>%
select(-year,-Region)
#  clean data, choose data in 2016, delete useless columns
map_data <- world_happiness %>%
filter(year==2017)%>%
select(-year,-Region)
View(map_data)
# use map_data to convert data into maps
map_world <- map_data(map="world")
# since values in Country and Region not match, try to merge them
map_world$Country <- map_world$region
map_world_after <- merge(map_world, map_data, by="Country", all.x=TRUE)
# reorder world map data
map_world_after <- map_world_after[order(map_world_after$group, map_world_after$order), ]
View(map_world_after)
# create world map of happiness
Happiness.plot <- ggplot() + geom_map(data=map_world_after, aes(map_id=region, x=long,  y=lat,fill=Happiness),map=map_world_after)
# add color, adjust coordinate and add ttile & theme
Happiness.plot <- Happiness.plot + scale_fill_gradient(low = "white", high = "blue", guide = "colourbar")+coord_equal()+labs(x="Latitude",y="Longitude")+ggtitle(label = "World Happiness Map 2016")+theme(plot.title = element_text(face="bold",hjust = 0.5))
Happiness.plot
# range dataframe to prepare for shiny app
Asia2015 <-filter(Asia, year==2015)
condition2015 <- as.matrix(select(Asia2015, -year,-Region,-Country,-Rank))
rownames(condition2015) <- Asia2015$Country
# read world happiness data
world_happiness1 <- read.csv("/Users/danlupan/2015-4.csv")
#clean data frame
world_happiness<-select(world_happiness1,
year,
Country,
Region,
Happiness=Happiness.Score,
Rank=Happiness.Rank,
Economy=Economy..GDP.per.Capita.,
Family,
Health=Health..Life.Expectancy.,
Freedom,
Trust=Trust..Government.Corruption.,
Generosity,
Dystopia.Residual)
#find all numeric variables
isnumeric <-sapply(world_happiness, function(x) is.numeric(x))
#create a correlation plot
cor_happiness<-cor(world_happiness[,isnumeric])
corrplot(cor_happiness, method="circle")
library(corrplot)
#create a correlation plot
cor_happiness<-cor(world_happiness[,isnumeric])
corrplot(cor_happiness, method="circle")
# filter rows of Eastern Asia
Asia <-filter(world_happiness,Region=="Eastern Asia")
# create a table related to the world happiness data of Eastern Asia
by_year_country<-Asia %>%
group_by(year,Country) %>%
summarize(Rank,Economy, Health)
# range dataframe to prepare for shiny app
Asia2015 <-filter(Asia, year==2015)
condition2015 <- as.matrix(select(Asia2015, -year,-Region,-Country,-Rank))
rownames(condition2015) <- Asia2015$Country
View(condition2015)
rownames(world_happiness) <- world_happiness$year
#boxplot(world_happiness$Happiness,data=world_happiness, xlab="boxplot of Happiness")
#boxplot(world_happiness$Economy,data=world_happiness, xlab="boxplot of Economy")
boxplot(world_happiness$Family,data=world_happiness, xlab="boxplot of Family")
#boxplot(world_happiness$Family,data=world_happiness, xlab="boxplot of Freedom")
#boxplot(world_happiness$Health,data=world_happiness, xlab="boxplot of Health")
boxplot(world_happiness$Trust,data=world_happiness, xlab="boxplot of Trust")
boxplot(world_happiness$Generosity,data=world_happiness, xlab="boxplot of Generosity")
boxplot(world_happiness$Dystopia.Residual,data=world_happiness, xlab="boxplot of Dystopia.Residual")
```{r echo=FALSE, cache=FALSE,results = 'hide',message=FALSE,warning=FALSE}
library(ggplot2)
library(dplyr)
library(corrplot)
#create a correlation plot
cor_happiness<-cor(world_happiness[,isnumeric])
corrplot(cor_happiness, method="circle")
#create a correlation plot
cor_happiness<-cor(world_happiness[,isnumeric])
cor_happiness<-filter(cor_happiness,-year,-Rank)
corrplot(cor_happiness, method="circle")
#create a correlation plot
cor_happiness<-cor(world_happiness[,isnumeric])
cor_happiness<-select(cor_happiness,-year,-Rank)
corrplot(cor_happiness, method="circle")
#create a correlation plot
cor_happiness<-select(world_happiness,-year,-Rank)
cor_happiness<-cor(cor_happiness[,isnumeric])
corrplot(cor_happiness, method="circle")
#create a correlation plot
cor_happiness<-filter(world_happiness,-year,-Rank)
cor_happiness<-cor(cor_happiness[,isnumeric])
corrplot(cor_happiness, method="circle")
#create a correlation plot
cor_happiness<-filter(world_happiness,-year,-Rank)
cor_happiness<-cor(cor_happiness[,isnumeric])
corrplot(cor_happiness, method="circle")
world_happiness1 <- read.csv("/Users/danlupan/2015-4.csv")
#clean data frame
world_happiness<-select(world_happiness1,
year,
Country,
Region,
Happiness=Happiness.Score,
Rank=Happiness.Rank,
Economy=Economy..GDP.per.Capita.,
Family,
Health=Health..Life.Expectancy.,
Freedom,
Trust=Trust..Government.Corruption.,
Generosity,
Dystopia.Residual)
#create a correlation plot
cor_happiness<-filter(world_happiness,-year,-Rank)
cor_happiness<-cor(cor_happiness[,isnumeric])
corrplot(cor_happiness, method="circle")
#create a correlation plot
cor_happiness<-filter(world_happiness,-year,-Rank)
cor_happiness<-cor(cor_happiness[,isnumeric])
corrplot(cor_happiness, method="circle")
View(cor_happiness)
#create a correlation plot
cor_happiness<-filter(world_happiness,-year,-Rank)
cor_happiness<-select(world_happiness,-year,-Rank)
cor_happiness<-cor(cor_happiness[,isnumeric])
corrplot(cor_happiness, method="circle")
#create a correlation plot
cor_happiness<-filter(world_happiness,-year,-Rank)
cor_happiness<-select(cor_happiness,-year,-Rank)
cor_happiness<-cor(cor_happiness[,isnumeric])
corrplot(cor_happiness, method="circle")
View(cor_happiness)
cor_happiness<-cor(cor_happiness)
#create a correlation plot
cor_happiness<-filter(world_happiness,-year,-Rank)
cor_happiness<-select(cor_happiness,-year,-Rank)
cor_happiness<-cor(as.numric(cor_happiness))
corrplot(cor_happiness, method="circle")
cor_happiness<-filter(world_happiness,-year,-Rank)
cor_happiness<-select(cor_happiness,-year,-Rank)
cor_happiness<-cor(as.numric(cor_happiness))
#create a correlation plot
cor_happiness<-filter(world_happiness,-year,-Rank)
cor_happiness<-select(cor_happiness,-year,-Rank)
cor_happiness<-cor(as.numeric(cor_happiness))
corrplot(cor_happiness, method="circle")
#create a correlation plot
cor_happiness<-filter(world_happiness,-year,-Rank)
cor_happiness<-select(cor_happiness,-year,-Rank)
cor_happiness<-cor(as.numeric(cor_happiness))
corrplot(cor_happiness, method="circle")
#create a correlation plot
cor_happiness<-filter(world_happiness,-year,-Rank)
cor_happiness<-select(cor_happiness,-year,-Rank)
cor_happiness<-cor(as.numeric(cor_happiness))
corrplot(cor_happiness, method="circle")
cor_happiness<-filter(world_happiness,-year,-Rank)
cor_happiness<-select(cor_happiness,-year,-Rank)
cor_happiness<-cor(as.numeric(cor_happiness))
isnumeric <-sapply(world_happiness, function(x) is.numeric(x))
```
```{r,fig.width=6,fig.height=6}
#create a correlation plot
cor_happiness<-filter(world_happiness,-year,-Rank)
cor_happiness<-select(cor_happiness,-year,-Rank)
cor_happiness<-cor(as.numeric(cor_happiness))
cor_happiness<-cor(world_happiness[,isnumeric])
corrplot(cor_happiness, method="circle")
View(world_happiness)
world_happiness2<-select(world_happiness,-year,-Rank)
isnumeric <-sapply(world_happiness, function(x) is.numeric(x))
cor_happiness<-cor(world_happiness[,isnumeric])
corrplot(cor_happiness, method="circle")
world_happiness2<-select(world_happiness,-year,-Rank)
isnumeric <-sapply(world_happiness2, function(x) is.numeric(x))
cor_happiness<-cor(world_happiness2[,isnumeric])
corrplot(cor_happiness, method="circle")
corrplot(cor_happiness,col = col1(20), method="circle")
corrplot(cor_happiness, method="circle",col = col1(20))
corrplot(cor_happiness, method="color")
#create a correlation plot
cor_happiness<-cor(world_happiness2[,isnumeric])
corrplot(cor_happiness, method="color",tl.pos = "lt", tl.col = "black", tl.offset=1, tl.srt = 0)
View(cor_happiness)
cor_happiness<-cor(world_happiness2[,isnumeric])
colnames(cor_happiness)<-c("H","E","F","H","F","T","G","D")
corrplot(cor_happiness, method="color",tl.pos = "lt", tl.col = "black", tl.offset=1, tl.srt = 0)
corrplot(cor_happiness, title="kk",method="color",tl.pos = "lt", tl.col = "black", tl.offset=1, tl.srt = 0)
corrplot(cor_happiness, title="correlation plot of metrixs",method="color",tl.pos = "lt", tl.col = "black", tl.offset=1, tl.srt = 0)
corrplot(cor_happiness, method="color",tl.pos = "lt", tl.col = "black", tl.offset=1, tl.srt = 0)
corrplot(cor_happiness, align="c",method="color",tl.pos = "lt", tl.col = "black", tl.offset=1, tl.srt = 0)
```{r}
shiny::runApp('~/Downloads/Education_Monitoring_Proj-master')
getwd()
getwd()
runApp()
install.packages(shinythemes)
install.packages("shinythemes")
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Downloads/Education_Monitoring_Proj-master 3')
shiny::runApp()
runApp('~/Downloads/Education_Monitoring_Proj-master 3')
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp('~/Downloads/Education_Monitoring_Proj-master 3')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
